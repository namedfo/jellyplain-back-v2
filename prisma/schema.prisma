// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "postgresql"
  // url                  = "postgresql://postgres:123@localhost:5432/nestjs?schema=public"
  url                  = "postgresql://gen_user:nwg4d99so7@5.23.55.233:5432/default_db"
  referentialIntegrity = "prisma"
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vkID Int
  role Roles @default(default)

  reviews  Review[]
  comments Comment[]
  orders   Order[]

  address Address[]

  phone_number Int?

  bdate      String
  first_name String
  last_name  String
  avatar_url String @db.VarChar(1000)

  @@unique([vkID])
}

model Address {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  result String @db.VarChar(250)

  surname String
  name    String
  middle  String

  country String
  city    String
  region  String

  street      String
  home_street String
  home_number Int

  postal_code Int

  orders Order[]

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  totalPrice Int
  trackCode  String? @db.VarChar(200)

  comments Comment[]

  delivery Delivery @default(pochtaru)

  address Address @relation(fields: [addressId], references: [id])

  status Status?

  user      User? @relation(fields: [userId], references: [id])
  userId    Int?
  addressId Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String @db.VarChar(1000)

  user   User @relation(fields: [userId], references: [id])
  userId Int

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?
}

enum Delivery {
  pochtaru
  pickup
}

enum Status {
  paid
  confirmed
  sent
  complected
}

enum Roles {
  default
  admin
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category    Categories
  subcategory SubCategory?

  type  Type
  brand Brand

  orders Order[]

  productChilds ProductChild[]
  reviews       Review[]

  title String
  price Int
}

model ProductChild {
  id Int @id @default(autoincrement())

  images Image[]
  sizes  Sizes[]

  color Color[]

  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}

model Image {
  id Int @id @default(autoincrement())

  url String @db.Text

  productChild   ProductChild? @relation(fields: [productChildId], references: [id])
  productChildId Int?
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating Int
  text   String @db.Char(10000)

  product   Product? @relation(fields: [productId], references: [id])
  productId Int?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

enum Type {
  original
  replica
}

enum Categories {
  sneakers
  uniform
  clothes
  accessories
  basketballs
}

enum SubCategory {
  everyday
  basketball

  shorts
  jackets
  hoodies
}

enum Brand {
  nike
  adidas
  underarmour
  thenorthface
}

model Color {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hex String @db.Char(50)

  productChild   ProductChild? @relation(fields: [productChildId], references: [id])
  productChildId Int?
}

enum Sizes {
  eu36
  eu37
  eu375
  eu38
  eu39
  eu40
  eu41
  eu42
  eu43
  eu44
  eu45
  eu46
}
